package pathFinder;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * MazeToBoard
 *
 * This is a class with a single static method for converting mazes (generated by Maze) into boards, so it can be
 * used by the Path Finder algorithm
 *
 * @author Henrique Salvadori Coelho - henriquesc@gmail.com - hcoelho.com
 */

public class MazeToBoard {

  /**
   * Converts a maze into a board
   *
   * @param m Maze to be converted
   * @return A board object
   */
  public static Board convert(mazeGenerator.Maze m) {

    // Converting the maze into a string
    String mazeString = m.toString();
    Board b;

    int realMazeSize = (m.size() * 2) + 1;

    // Getting the coordinates for the start and finish point
    int startPointRow  = 1;
    int startPointCol  = 0;
    int finishPointRow = realMazeSize - 2;
    int finishPointCol = realMazeSize - 1;

    ArrayList<Character> boardCharacters = new ArrayList<>(
      Arrays.asList(m.BOARD_EMPTY, m.BOARD_START, m.BOARD_FINISH, m.BOARD_WALL));

    // Creating the board
    b = new Board(realMazeSize, realMazeSize, new Mark(startPointCol ,  startPointRow),
                                              new Mark(finishPointCol, finishPointRow));

    // Looping through the string. i refers to the position of the pointer
    // in the string, index refer to the pointer only if pointing to 'real'
    // characters for the board (not special characters)
    for (int i = 0, index = 0; i < mazeString.length(); i++) {

      // Getting the row and column of the cell
      int row = index % realMazeSize;
      int col = index / realMazeSize;

      // Holds if this cell is a start/finish point
      boolean isReservedPoint = (row == startPointRow  && col == startPointCol) ||
                                (row == finishPointRow && col == finishPointCol);

      // If the cell is a wall and not a reserved point, places an obstacle
      if (mazeString.charAt(i) == m.BOARD_WALL && !isReservedPoint) { b.putObstacle(new Mark(col, row)); }

      // Determines if the cell is a character or a special character, if it
      // is a real character, adds one to the index
      boolean isBoardCharacter = boardCharacters.contains(mazeString.charAt(i));

      // If the character was part of the maze, increments the index
      if (isBoardCharacter) { index++; }
    }

    return b;
  }
}
